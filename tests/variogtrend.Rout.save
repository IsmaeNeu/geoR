
R : Copyright 2002, The R Development Core Team
Version 1.6.1 Patched (2002-11-06)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type `license()' or `licence()' for distribution details.

R is a collaborative project with many contributors.
Type `contributors()' for more information.

Type `demo()' for some demos, `help()' for on-line help, or
`help.start()' for a HTML browser interface to help.
Type `q()' to quit R.

> require(geoR)
Loading required package: geoR 

------------------------------------------------
geoR - functions for geostatistical data analysis
geoR version 1.3-8 is now loaded
------------------------------------------------

[1] TRUE
> options(digits = 3, width = 80)
> set.seed(44)
> ##
> ## Simulating data
> ##
> ap <- grf(100, cov.pars=c(10, .25))
grf: process with  1  covariance structure(s)
grf: nugget effect is: tausq= 0 
grf: covariance model 1 is: exponential(sigmasq=10, phi=0.25)
grf: decomposition algorithm used is:  cholesky 
grf: simulation(s) on randomly chosen locations with  100  points
Loading required package: mva 
grf: End of simulation procedure. Number of realizations: 1 
> ##
> ## replicating data and
> ## adding a "trend" to the simulated data
> ##
> apt <- ap
> apt$data <- 50 + apt$data - 15*ap$coords[,1] + 20*ap$coords[,2]
> ##
> ## creating a covariate
> ##
> apt$covar <- 15*ap$coords[,1] + 20*ap$coords[,2]
> ##
> ## Comparing plots for data with and without trend
> ##
> plot.geodata(ap)
Loading required package: scatterplot3d 
> plot.geodata(apt)
> ##
> ## Computing empirical variograms
> ##
> ## for data without trend
> ap.v <- variog(ap, max.dist=1)
Loading required package: modreg 
variog: computing omnidirectional variogram
> ap.v[1:4]
$u
 [1] 0.0208 0.0833 0.1666 0.2499 0.3332 0.4165 0.4998 0.5831 0.6664 0.7497
[11] 0.8330 0.9164 0.9997

$v
 [1] 1.16 2.91 4.09 5.65 6.26 6.50 6.48 6.51 5.37 4.64 4.33 5.05 5.29

$n
 [1]  30 186 323 427 511 531 534 525 537 456 377 284 104

$sd
 [1] 1.38 4.74 5.09 7.27 7.99 8.21 7.59 7.81 7.06 5.56 5.89 7.18 8.38

> ##
> ## for data with trend, ignoring the trend
> apt.v0 <- variog(apt, max.dist=1)
variog: computing omnidirectional variogram
> apt.v0[1:4]
$u
 [1] 0.0208 0.0833 0.1666 0.2499 0.3332 0.4165 0.4998 0.5831 0.6664 0.7497
[11] 0.8330 0.9164 0.9997

$v
 [1]   1.35   5.67  10.32  19.57  25.37  34.52  44.16  56.76  74.64  95.28
[11] 132.40 159.72 210.44

$n
 [1]  30 186 323 427 511 531 534 525 537 456 377 284 104

$sd
 [1]   1.99   7.91  11.34  21.13  27.54  37.58  45.87  57.18  60.05  69.28
[11]  86.04 108.34 137.14

> ##
> ## for data with trend, with estimated 1st degree trend
> apt.v1 <- variog(apt, trend="1st", max.dist=1)
variog: computing omnidirectional variogram
> apt.v1[1:4]
$u
 [1] 0.0208 0.0833 0.1666 0.2499 0.3332 0.4165 0.4998 0.5831 0.6664 0.7497
[11] 0.8330 0.9164 0.9997

$v
 [1] 1.16 2.88 4.06 5.59 6.22 6.53 6.56 6.66 5.51 4.81 4.34 4.68 4.72

$n
 [1]  30 186 323 427 511 531 534 525 537 456 377 284 104

$sd
 [1] 1.38 4.72 5.07 7.22 7.95 8.16 7.60 7.76 7.11 5.68 5.71 6.53 7.71

> ## Notice here that the following commands would produce exactly the same results:
> ## res1 <- lm(apt$data ~ apt$coords)$resid
> ## apt.v1.res1 <- variog(apt, data=res1, max.dist=1)
> ##
> ## for data with trend, with trend given by the covariate
> apt.vc <- variog(apt, trend=~apt$covar, max.dist=1)
variog: computing omnidirectional variogram
> apt.vc[1:4]
$u
 [1] 0.0208 0.0833 0.1666 0.2499 0.3332 0.4165 0.4998 0.5831 0.6664 0.7497
[11] 0.8330 0.9164 0.9997

$v
 [1]   1.31   5.55  10.08  18.92  24.11  31.87  41.03  52.40  70.23  89.66
[11] 130.01 166.16 209.42

$n
 [1]  30 186 323 427 511 531 534 525 537 456 377 284 104

$sd
 [1]   1.86   7.58  11.44  21.03  27.00  35.83  43.18  51.84  57.05  65.88
[11]  82.09 106.95 130.86

> ## Notice here that the following commands would produce exactly the same results:
> ## res2 <- lm(apt$data ~ apt$covar)$resid
> ## apt.vc.res2 <- variog(apt, data=res2, max.dist=1)
> ##
> ## Ploting and coparing variograms
> ##
> par(mfrow=c(2,2))
> plot(ap.v)
> plot(apt.v0)
> plot(apt.v1)
> plot(apt.vc)
> ##
> 
