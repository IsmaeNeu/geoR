
R : Copyright 2002, The R Development Core Team
Version 1.6.1 Patched (2002-11-06)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type `license()' or `licence()' for distribution details.

R is a collaborative project with many contributors.
Type `contributors()' for more information.

Type `demo()' for some demos, `help()' for on-line help, or
`help.start()' for a HTML browser interface to help.
Type `q()' to quit R.


------------------------------------------------
geoR - functions for geostatistical data analysis
geoR version 1.3-7 is now loaded
------------------------------------------------

[Previously saved workspace restored]

> invisible(options(echo = TRUE))
> require(geoR)
[1] TRUE
> options(digits = 3, width = 80)
> set.seed(30)
> data(s100)
> pred.grid <- expand.grid((1:4)/4,(1:4)/4)
> ##
> ##
> pr0 <- prior.control(beta.prior="fixed", beta=0, sigmasq.prior = "fixed", sigmasq = 0.7323, phi.prior = "fixed", phi = 0.2)
> test0 <- krige.bayes(s100, prior = pr0, locations = pred.grid)
Loading required package: mva 
krige.bayes: model with constant mean
krige.bayes: done!
> 
> pr1 <- prior.control(beta.prior="normal", beta=0, beta.var.std=0.01, sigmasq.prior = "fixed", sigmasq = 0.7323, phi.prior = "fixed", phi = 0.2)
> test1 <- krige.bayes(s100, prior = pr1, locations = pred.grid)
krige.bayes: model with constant mean
krige.bayes: done!
> 
> pr2 <- prior.control(beta.prior="normal", beta=0, beta.var.std=10, sigmasq.prior = "fixed", sigmasq = 0.7323, phi.prior = "fixed", phi = 0.2)
> test2 <- krige.bayes(s100, prior = pr2, locations = pred.grid)
krige.bayes: model with constant mean
krige.bayes: done!
> 
> pr3 <- prior.control(beta.prior="normal", beta=0, beta.var.std=100, sigmasq.prior = "fixed", sigmasq = 0.7323, phi.prior = "fixed", phi = 0.2)
> test3 <- krige.bayes(s100, prior = pr3, locations = pred.grid)
krige.bayes: model with constant mean
krige.bayes: done!
> 
> pr4 <- prior.control(beta.prior="normal", beta=0, beta.var.std=10000, sigmasq.prior = "fixed", sigmasq = 0.7323, phi.prior = "fixed", phi = 0.2)
> test4 <- krige.bayes(s100, prior = pr4, locations = pred.grid)
krige.bayes: model with constant mean
krige.bayes: done!
> 
> pr5 <- prior.control(beta.prior="flat", sigmasq.prior = "fixed", sigmasq = 0.7323, phi.prior = "fixed", phi = 0.2)
> test5 <- krige.bayes(s100, prior = pr5, locations = pred.grid)
krige.bayes: model with constant mean
krige.bayes: done!
> 
> apm0 <- cbind(test0$pred[[1]],test1$pred[[1]],test2$pred[[1]],test3$pred[[1]],test4$pred[[1]],test5$pred[[1]])
> apv0 <- cbind(test0$pred[[2]],test1$pred[[2]],test2$pred[[2]],test3$pred[[2]],test4$pred[[2]],test5$pred[[2]])
> apm0
        [,1]   [,2]   [,3]   [,4]   [,5]   [,6]
 [1,]  1.021  1.022  1.027  1.027  1.027  1.027
 [2,]  1.082  1.083  1.093  1.093  1.093  1.093
 [3,]  2.133  2.133  2.134  2.134  2.134  2.134
 [4,]  1.171  1.186  1.373  1.375  1.375  1.375
 [5,]  0.381  0.382  0.388  0.388  0.388  0.388
 [6,]  0.851  0.851  0.860  0.860  0.860  0.860
 [7,]  0.700  0.700  0.701  0.701  0.701  0.701
 [8,]  1.528  1.538  1.665  1.666  1.667  1.667
 [9,]  0.738  0.739  0.753  0.753  0.753  0.753
[10,]  1.507  1.507  1.508  1.508  1.508  1.508
[11,]  1.679  1.680  1.693  1.693  1.693  1.693
[12,]  1.215  1.219  1.265  1.266  1.266  1.266
[13,] -0.945 -0.939 -0.863 -0.862 -0.862 -0.862
[14,]  0.482  0.489  0.569  0.570  0.570  0.570
[15,]  0.995  1.001  1.074  1.075  1.075  1.075
[16,]  0.575  0.588  0.747  0.749  0.749  0.749
> apv0
        [,1]   [,2]   [,3]   [,4]   [,5]   [,6]
 [1,] 0.2380 0.2380 0.2380 0.2380 0.2380 0.2380
 [2,] 0.2382 0.2382 0.2383 0.2383 0.2383 0.2383
 [3,] 0.0836 0.0836 0.0836 0.0836 0.0836 0.0836
 [4,] 0.4720 0.4725 0.4784 0.4785 0.4785 0.4785
 [5,] 0.2385 0.2385 0.2385 0.2385 0.2385 0.2385
 [6,] 0.2158 0.2158 0.2158 0.2158 0.2158 0.2158
 [7,] 0.1153 0.1153 0.1153 0.1153 0.1153 0.1153
 [8,] 0.3907 0.3910 0.3937 0.3937 0.3937 0.3937
 [9,] 0.2888 0.2888 0.2889 0.2889 0.2889 0.2889
[10,] 0.1069 0.1069 0.1069 0.1069 0.1069 0.1069
[11,] 0.3106 0.3106 0.3106 0.3106 0.3106 0.3106
[12,] 0.1851 0.1851 0.1855 0.1855 0.1855 0.1855
[13,] 0.3067 0.3068 0.3078 0.3078 0.3078 0.3078
[14,] 0.3330 0.3331 0.3342 0.3342 0.3342 0.3342
[15,] 0.2999 0.2999 0.3009 0.3009 0.3009 0.3009
[16,] 0.3275 0.3279 0.3322 0.3323 0.3323 0.3323
> ##
> ##
> ##
> pr0 <- prior.control(beta.prior="fixed", beta=0, sigmasq.prior = "rec",  phi.prior = "fixed", phi = 0.2)
> test0 <- krige.bayes(s100, prior = pr0, locations = pred.grid)
krige.bayes: model with constant mean
krige.bayes: done!
> 
> pr1 <- prior.control(beta.prior="normal", beta=0, beta.var.std=0.01, sigmasq.prior = "rec", phi.prior = "fixed", phi = 0.2)
> test1 <- krige.bayes(s100, prior = pr1, locations = pred.grid)
krige.bayes: model with constant mean
krige.bayes: done!
> 
> pr2 <- prior.control(beta.prior="normal", beta=0, beta.var.std=10, sigmasq.prior = "rec", phi.prior = "fixed", phi = 0.2)
> test2 <- krige.bayes(s100, prior = pr2, locations = pred.grid)
krige.bayes: model with constant mean
krige.bayes: done!
> 
> pr3 <- prior.control(beta.prior="normal", beta=0, beta.var.std=100, sigmasq.prior = "rec", phi.prior = "fixed", phi = 0.2)
> test3 <- krige.bayes(s100, prior = pr3, locations = pred.grid)
krige.bayes: model with constant mean
krige.bayes: done!
> 
> pr4 <- prior.control(beta.prior="normal", beta=0, beta.var.std=10000, sigmasq.prior = "rec", phi.prior = "fixed", phi = 0.2)
> test4 <- krige.bayes(s100, prior = pr4, locations = pred.grid)
krige.bayes: model with constant mean
krige.bayes: done!
> 
> pr5 <- prior.control(beta.prior="flat", sigmasq.prior = "rec", phi.prior = "fixed", phi = 0.2)
> test5 <- krige.bayes(s100, prior = pr5, locations = pred.grid)
krige.bayes: model with constant mean
krige.bayes: done!
> 
> apm <- cbind(test0$pred[[1]],test1$pred[[1]],test2$pred[[1]],test3$pred[[1]],test4$pred[[1]],test5$pred[[1]])
> apv <-  cbind(test0$pred[[2]],test1$pred[[2]],test2$pred[[2]],test3$pred[[2]],test4$pred[[2]],test5$pred[[2]])
> apm
        [,1]   [,2]   [,3]   [,4]   [,5]   [,6]
 [1,]  1.021  1.022  1.027  1.027  1.027  1.027
 [2,]  1.082  1.083  1.093  1.093  1.093  1.093
 [3,]  2.133  2.133  2.134  2.134  2.134  2.134
 [4,]  1.171  1.186  1.373  1.375  1.375  1.375
 [5,]  0.381  0.382  0.388  0.388  0.388  0.388
 [6,]  0.851  0.851  0.860  0.860  0.860  0.860
 [7,]  0.700  0.700  0.701  0.701  0.701  0.701
 [8,]  1.528  1.538  1.665  1.666  1.667  1.667
 [9,]  0.738  0.739  0.753  0.753  0.753  0.753
[10,]  1.507  1.507  1.508  1.508  1.508  1.508
[11,]  1.679  1.680  1.693  1.693  1.693  1.693
[12,]  1.215  1.219  1.265  1.266  1.266  1.266
[13,] -0.945 -0.939 -0.863 -0.862 -0.862 -0.862
[14,]  0.482  0.489  0.569  0.570  0.570  0.570
[15,]  0.995  1.001  1.074  1.075  1.075  1.075
[16,]  0.575  0.588  0.747  0.749  0.749  0.749
> apv
        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]
 [1,] 0.2830 0.282 0.268 0.267 0.267 0.270
 [2,] 0.2832 0.282 0.268 0.268 0.268 0.270
 [3,] 0.0994 0.099 0.094 0.094 0.094 0.095
 [4,] 0.5612 0.559 0.538 0.538 0.538 0.543
 [5,] 0.2835 0.282 0.268 0.268 0.268 0.271
 [6,] 0.2565 0.255 0.243 0.242 0.242 0.245
 [7,] 0.1371 0.136 0.130 0.130 0.130 0.131
 [8,] 0.4645 0.463 0.443 0.442 0.442 0.447
 [9,] 0.3434 0.342 0.325 0.324 0.324 0.328
[10,] 0.1271 0.127 0.120 0.120 0.120 0.121
[11,] 0.3693 0.368 0.349 0.349 0.349 0.353
[12,] 0.2201 0.219 0.209 0.208 0.208 0.211
[13,] 0.3646 0.363 0.346 0.346 0.346 0.349
[14,] 0.3959 0.394 0.376 0.375 0.375 0.379
[15,] 0.3565 0.355 0.338 0.338 0.338 0.341
[16,] 0.3894 0.388 0.373 0.373 0.373 0.377
> 
> apv[,6]/apv[,4]
 [1] 1.01 1.01 1.01 1.01 1.01 1.01 1.01 1.01 1.01 1.01 1.01 1.01 1.01 1.01 1.01
[16] 1.01
> 
> proc.time()
[1] 5.18 0.18 5.34 0.01 0.00
> 
